# CI for Product Catalog Service
name: product-catalog-ci

# on: says when to trigger this workflow
on: 
    pull_request_target:
        branches:
        - main

    push:
        branches-ignore:
        - kubernetes/productcatalog/deploy.yaml #ignore k8s manifest changes to avoid loop
# jobs: include multiple steps in CI, steps take place are build, code-quality, docker and update k8s manifests 
jobs: 
    test:
        name: unit testing
        # runs-on: we have setup our own runners (self hosted runners)
        runs-on: [self-hosted, linux, x64, aws-prod-cat-runner] 

        # steps: checkout, install golang, build project and run unit test
        steps: 
        - name: checkout code #checkout code from repo
          uses: actions/checkout@v4 #use checkout action to checkout code

        - name: Setup Go 1.22 #setup golang environment
          uses: actions/setup-go@v2 #use setup-go action to setup golang environment
          with:
            go-version: 1.22
        
        - name: Build #Build step here to validate code is building fine. Build the golang project which creates an executable named product-catalog-service
          run: |
            cd src/product-catalog
            go mod download
            go build -o product-catalog-service main.go  

        - name: unit tests #run unit tests 
          run: |
            cd src/product-catalog 
            go test ./...

    # code-quality: checkout code, install golang, run static code analysis
    code-quality:
        name: static code analysis
        runs-on: [self-hosted, linux, x64, aws-prod-cat-runner]

        steps:
        - name: checkout code #checkout code from repo
          uses: actions/checkout@v4
        
        - name: Setup Go 1.22 #setup golang environment
          uses: actions/setup-go@v2
          with:
           go-version: 1.22
        
        - name: Run golangci-lint #static code analysis using golangci-lint
          uses: golangci/golangci-lint-action@v6 #use golangci-lint action, a popular linter for golang
          with:
            version: v1.55.2
            run: golangci-lint run
            working-directory: src/product-catalog

    # docker: for docker steps - checkout code, install docker/login/docker image push
    docker:
       name: docker build and push #build and push docker image to ECR
       runs-on: [self-hosted, linux, x64, aws-prod-cat-runner]

        needs: [test, code-quality] # runs after test and code-quality jobs succeed

        steps:
        - name: Checkout code #checkout code from repo
          uses: actions/checkout@v4

        - name: Set up Docker Buildx #setup docker buildx to build multi-platform images
          uses: docker/setup-buildx-action@v2

        - name: Login to Amazon ECR #login to ECR to push docker image
          uses: aws-actions/amazon-ecr-login@v1

        - name: Build and push Docker image to ECR #build and push docker image to ECR
          uses: docker/build-push-action@v6
          with:
           context: src/product-catalog 
           file: src/product-catalog/Dockerfile
           push: true
           tags: ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:${{ github.run_id }}

        - name: Scan Docker image with Trivy #scan docker image with trivy for vulnerabilities
          uses: aquasecurity/trivy-action@v0.17.0
          with:
            image-ref: ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:${{ github.run_id }}
            format: 'table'   # or json, sarif
            exit-code: '1'    # fail job on vulnerabilities found
            severity: 'CRITICAL,HIGH'  # scan for these levels



    # updatek8s: checkout code, update k8s manifest and push changes to trigger CD process
    updatek8s:
        name: update k8s deployment manifest
        runs-on: [self-hosted, linux, x64, aws-prod-cat-runner]

        needs: docker # runs after docker job succeeds

        steps:
        - name: checkout code #checkout code from repo
          uses: actions/checkout@v4
          with:
            token: ${{ secrets.TOKEN_GITHUB }} # use a personal access token to have permission to push changes

        - name: Update tag in kubernetes deployment manifest
          run: |
            sed -i "s|image: .*|image: ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:${{ github.run_id }}|" kubernetes/productcatalog/deploy.yaml

        
        - name: Commit and push changes
          run: |
            git config --global user.email "narpala.roopa@gmail.com"
            git config --global user.name "Roopa-Jagulur"
            git add kubernetes/productcatalog/deploy.yaml
            git commit -m "[CI]: Update product catalog image tag"
            git push origin HEAD:main -f

        
        
          


        
